<div class="main-content">
    <div class="container mt-5">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="mb-0">
                <i class="bi bi-envelope text-primary me-3"></i><span data-translate="email.title">Email</span>
            </h1>
            <div class="text-muted">
                <i class="bi bi-clock me-1"></i>
                <span id="currentTime"></span>
            </div>
        </div>

        <!-- Email Actions Bar -->
        <div class="card mb-4 shadow-sm border-0">
            <div class="card-header bg-gradient-primary text-white py-3">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <h5 class="mb-0 d-flex align-items-center fw-bold">
                            <i class="bi bi-inbox me-2"></i><span data-translate="email.inbox">Inbox</span>
                        </h5>
                    </div>
                    <div class="col-md-6 text-end">
                        <button class="btn btn-light btn-sm me-2" onclick="refreshEmails()">
                            <i class="bi bi-arrow-clockwise me-1"></i><span data-translate="email.refresh">Refresh</span>
                        </button>
                        <button class="btn btn-warning btn-sm" onclick="composeEmail()" data-bs-toggle="modal" data-bs-target="#composeModal">
                            <i class="bi bi-pencil-square me-1"></i><span data-translate="email.compose">Compose</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Email Filters -->
        <div class="card mb-4 shadow-sm border-0">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-3">
                        <select class="form-select" id="emailFilter" onchange="filterEmails()">
                            <option value="all" data-translate="email.allEmails">All Emails</option>
                            <option value="unread" data-translate="email.unread">Unread</option>
                            <option value="read" data-translate="email.read">Read</option>
                            <option value="important" data-translate="email.important">Important</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" id="emailSearch" placeholder="Search emails..." data-translate-placeholder="email.searchPlaceholder" onkeyup="searchEmails()">
                        </div>
                    </div>
                    <div class="col-md-3 text-end">
                        <small class="text-muted">
                            <span id="emailCount">0</span> <span data-translate="email.emailsTotal">emails total</span>
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Email List -->
        <div class="card shadow-sm border-0">
            <div class="card-body p-0">
                <div id="emailList" class="list-group list-group-flush">
                    <!-- Loading state -->
                    <div id="emailLoading" class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2 text-muted" data-translate="email.loading">Loading emails...</p>
                    </div>
                    
                    <!-- Empty state -->
                    <div id="emailEmpty" class="text-center py-5" style="display: none;">
                        <i class="bi bi-inbox display-1 text-muted"></i>
                        <h5 class="mt-3 text-muted" data-translate="email.noEmails">No emails found</h5>
                        <p class="text-muted" data-translate="email.noEmailsDescription">Your inbox is empty or no emails match your search criteria.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Compose Email Modal -->
<div class="modal fade" id="composeModal" tabindex="-1" aria-labelledby="composeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="composeModalLabel">
                    <i class="bi bi-pencil-square me-2"></i><span data-translate="email.composeEmail">Compose Email</span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="composeForm">
                    <div class="mb-3">
                        <label for="emailTo" class="form-label" data-translate="email.to">To</label>
                        <input type="email" class="form-control" id="emailTo" required data-translate-placeholder="email.toPlaceholder" placeholder="recipient@example.com">
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="emailCc" class="form-label" data-translate="email.cc">CC</label>
                                <input type="email" class="form-control" id="emailCc" data-translate-placeholder="email.ccPlaceholder" placeholder="cc@example.com">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="emailBcc" class="form-label" data-translate="email.bcc">BCC</label>
                                <input type="email" class="form-control" id="emailBcc" data-translate-placeholder="email.bccPlaceholder" placeholder="bcc@example.com">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="emailSubject" class="form-label" data-translate="email.subject">Subject</label>
                        <input type="text" class="form-control" id="emailSubject" required data-translate-placeholder="email.subjectPlaceholder" placeholder="Enter subject">
                    </div>
                    <div class="mb-3">
                        <label for="emailBody" class="form-label" data-translate="email.message">Message</label>
                        <textarea class="form-control" id="emailBody" rows="8" required data-translate-placeholder="email.messagePlaceholder" placeholder="Enter your message here..."></textarea>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="emailPriority">
                            <label class="form-check-label" for="emailPriority" data-translate="email.highPriority">
                                Mark as high priority
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-translate="email.cancel">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="sendEmail()">
                    <i class="bi bi-send me-1"></i><span data-translate="email.send">Send Email</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Email View Modal -->
<div class="modal fade" id="emailViewModal" tabindex="-1" aria-labelledby="emailViewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="emailViewModalLabel">
                    <i class="bi bi-envelope-open me-2"></i><span data-translate="email.viewEmail">View Email</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="emailViewContent">
                    <!-- Email content will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-primary" onclick="replyToEmail()">
                    <i class="bi bi-reply me-1"></i><span data-translate="email.reply">Reply</span>
                </button>
                <button type="button" class="btn btn-outline-secondary" onclick="forwardEmail()">
                    <i class="bi bi-arrow-right me-1"></i><span data-translate="email.forward">Forward</span>
                </button>
                <button type="button" class="btn btn-danger" onclick="deleteEmail()">
                    <i class="bi bi-trash me-1"></i><span data-translate="email.delete">Delete</span>
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // Email functionality
    let emails = [];
    let currentEmail = null;

    // Initialize email page
    document.addEventListener('DOMContentLoaded', function() {
        updateCurrentTime();
        setInterval(updateCurrentTime, 60000);
        loadEmails();
    });

    function updateCurrentTime() {
        const now = new Date();
        const timeString = now.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        const timeElement = document.getElementById('currentTime');
        if (timeElement) {
            timeElement.textContent = timeString;
        }
    }

    async function loadEmails(filter = '', search = '') {
        const emailLoading = document.getElementById('emailLoading');
        const emailEmpty = document.getElementById('emailEmpty');
        const emailCount = document.getElementById('emailCount');

        // Show loading
        emailLoading.style.display = 'block';
        emailEmpty.style.display = 'none';

        try {
            const params = new URLSearchParams();
            if (filter) params.append('filter', filter);
            if (search) params.append('search', search);
            
            const response = await fetch(`/api/emails?${params.toString()}`);
            const data = await response.json();
            
            if (data.success) {
                emails = data.emails;
                displayEmails(emails);
                emailCount.textContent = emails.length;
            } else {
                throw new Error(data.message || 'Failed to load emails');
            }
        } catch (error) {
            console.error('Error loading emails:', error);
            showError('Failed to load emails. Please try again.');
        } finally {
            emailLoading.style.display = 'none';
        }
    }

    function displayEmails(emailsToShow) {
        const emailList = document.getElementById('emailList');
        const emailEmpty = document.getElementById('emailEmpty');
        const emailLoading = document.getElementById('emailLoading');

        // Clear existing emails (except loading and empty states)
        const existingEmails = emailList.querySelectorAll('.email-item');
        existingEmails.forEach(email => email.remove());

        if (emailsToShow.length === 0) {
            emailEmpty.style.display = 'block';
            emailLoading.style.display = 'none';
            return;
        }

        emailEmpty.style.display = 'none';
        emailLoading.style.display = 'none';

        emailsToShow.forEach(email => {
            const emailItem = createEmailItem(email);
            emailList.insertBefore(emailItem, emailLoading);
        });
    }

    function createEmailItem(email) {
        const emailItem = document.createElement('div');
        emailItem.className = `list-group-item list-group-item-action email-item ${!email.is_read ? 'border-start border-primary border-3' : ''}`;
        emailItem.onclick = () => viewEmail(email.id);

        const timeAgo = getTimeAgo(new Date(email.created_at));
        
        emailItem.innerHTML = `
            <div class="d-flex w-100 justify-content-between align-items-start">
                <div class="flex-grow-1">
                    <div class="d-flex align-items-center mb-1">
                        <strong class="me-2 ${!email.is_read ? 'text-primary' : ''}">${email.sender_email}</strong>
                        ${email.is_important ? '<i class="bi bi-star-fill text-warning me-1" title="Important"></i>' : ''}
                        ${!email.is_read ? '<span class="badge bg-primary rounded-pill me-2">New</span>' : ''}
                    </div>
                    <h6 class="mb-1 ${!email.is_read ? 'fw-bold' : ''}">${email.subject}</h6>
                    <p class="mb-1 text-muted small">${email.body.substring(0, 100)}${email.body.length > 100 ? '...' : ''}</p>
                </div>
                <div class="text-end">
                    <small class="text-muted">${timeAgo}</small>
                    <div class="mt-1">
                        <button class="btn btn-sm btn-outline-warning me-1" onclick="event.stopPropagation(); toggleImportant(${email.id}, ${!email.is_important})" title="${email.is_important ? 'Remove from important' : 'Mark as important'}">
                            <i class="bi bi-star${email.is_important ? '-fill' : ''}"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="event.stopPropagation(); deleteEmailById(${email.id})" title="Delete">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;

        return emailItem;
    }

    function getTimeAgo(date) {
        const now = new Date();
        const diffInMinutes = Math.floor((now - date) / (1000 * 60));
        
        if (diffInMinutes < 60) {
            return `${diffInMinutes}m ago`;
        } else if (diffInMinutes < 1440) {
            return `${Math.floor(diffInMinutes / 60)}h ago`;
        } else {
            return `${Math.floor(diffInMinutes / 1440)}d ago`;
        }
    }

    function refreshEmails() {
        const filter = document.getElementById('emailFilter').value;
        const search = document.getElementById('emailSearch').value;
        loadEmails(filter, search);
    }

    function filterEmails() {
        const filter = document.getElementById('emailFilter').value;
        const search = document.getElementById('emailSearch').value;
        loadEmails(filter, search);
    }

    function searchEmails() {
        const filter = document.getElementById('emailFilter').value;
        const search = document.getElementById('emailSearch').value;
        loadEmails(filter, search);
    }

    function composeEmail() {
        // Clear form
        document.getElementById('composeForm').reset();
    }

    async function sendEmail() {
        const to = document.getElementById('emailTo').value;
        const cc = document.getElementById('emailCc').value;
        const bcc = document.getElementById('emailBcc').value;
        const subject = document.getElementById('emailSubject').value;
        const body = document.getElementById('emailBody').value;
        const isImportant = document.getElementById('emailPriority').checked;

        if (!to || !subject || !body) {
            showError('Please fill in all required fields.');
            return;
        }

        try {
            const response = await fetch('/api/emails', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    to,
                    cc: cc || null,
                    bcc: bcc || null,
                    subject,
                    body,
                    isImportant,
                    isDraft: false
                })
            });

            const data = await response.json();
            
            if (data.success) {
                showSuccess('Email sent successfully!');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('composeModal'));
                modal.hide();
                
                // Clear form and refresh emails
                document.getElementById('composeForm').reset();
                refreshEmails();
            } else {
                throw new Error(data.message || 'Failed to send email');
            }
        } catch (error) {
            console.error('Error sending email:', error);
            showError('Failed to send email. Please try again.');
        }
    }

    async function viewEmail(emailId) {
        try {
            const response = await fetch(`/api/emails/${emailId}`);
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || 'Failed to load email');
            }
            
            const email = data.email;
            currentEmail = email;
            
            // Mark as read if unread
            if (!email.is_read) {
                await markAsRead(emailId, true);
                // Update local data
                const emailIndex = emails.findIndex(e => e.id === emailId);
                if (emailIndex !== -1) {
                    emails[emailIndex].is_read = true;
                    displayEmails(emails); // Refresh display
                }
            }

            const emailViewContent = document.getElementById('emailViewContent');
            emailViewContent.innerHTML = `
                <div class="mb-3">
                    <div class="row">
                        <div class="col-sm-2"><strong>From:</strong></div>
                        <div class="col-sm-10">${email.sender_email}</div>
                    </div>
                    <div class="row">
                        <div class="col-sm-2"><strong>To:</strong></div>
                        <div class="col-sm-10">${email.recipient_email}</div>
                    </div>
                    ${email.cc_emails ? `
                    <div class="row">
                        <div class="col-sm-2"><strong>CC:</strong></div>
                        <div class="col-sm-10">${email.cc_emails}</div>
                    </div>
                    ` : ''}
                    <div class="row">
                        <div class="col-sm-2"><strong>Subject:</strong></div>
                        <div class="col-sm-10">${email.subject}</div>
                    </div>
                    <div class="row">
                        <div class="col-sm-2"><strong>Date:</strong></div>
                        <div class="col-sm-10">${new Date(email.created_at).toLocaleString()}</div>
                    </div>
                </div>
                <hr>
                <div class="email-body" style="white-space: pre-wrap;">${email.body}</div>
            `;

            const modal = new bootstrap.Modal(document.getElementById('emailViewModal'));
            modal.show();
        } catch (error) {
            console.error('Error viewing email:', error);
            showError('Failed to load email. Please try again.');
        }
    }

    async function markAsRead(emailId, isRead) {
        try {
            const response = await fetch(`/api/emails/${emailId}/read`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ isRead })
            });

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.message || 'Failed to update email');
            }
        } catch (error) {
            console.error('Error updating email read status:', error);
        }
    }

    async function toggleImportant(emailId, isImportant) {
        try {
            const response = await fetch(`/api/emails/${emailId}/important`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ isImportant })
            });

            const data = await response.json();
            if (data.success) {
                // Update local data
                const emailIndex = emails.findIndex(e => e.id === emailId);
                if (emailIndex !== -1) {
                    emails[emailIndex].is_important = isImportant;
                    displayEmails(emails); // Refresh display
                }
                showSuccess(isImportant ? 'Email marked as important' : 'Email unmarked as important');
            } else {
                throw new Error(data.message || 'Failed to update email');
            }
        } catch (error) {
            console.error('Error updating email importance:', error);
            showError('Failed to update email importance.');
        }
    }

    async function deleteEmailById(emailId) {
        if (!confirm('Are you sure you want to delete this email?')) {
            return;
        }

        try {
            const response = await fetch(`/api/emails/${emailId}`, {
                method: 'DELETE'
            });

            const data = await response.json();
            if (data.success) {
                // Remove from local data
                emails = emails.filter(email => email.id !== emailId);
                displayEmails(emails);
                document.getElementById('emailCount').textContent = emails.length;
                showSuccess('Email deleted successfully');
            } else {
                throw new Error(data.message || 'Failed to delete email');
            }
        } catch (error) {
            console.error('Error deleting email:', error);
            showError('Failed to delete email. Please try again.');
        }
    }

    async function deleteEmail() {
        if (currentEmail && confirm('Are you sure you want to delete this email?')) {
            await deleteEmailById(currentEmail.id);
            const modal = bootstrap.Modal.getInstance(document.getElementById('emailViewModal'));
            modal.hide();
        }
    }

    function replyToEmail() {
        if (currentEmail) {
            document.getElementById('emailTo').value = currentEmail.sender_email;
            document.getElementById('emailSubject').value = 'Re: ' + currentEmail.subject;
            document.getElementById('emailBody').value = `\n\n--- Original Message ---\nFrom: ${currentEmail.sender_email}\nSubject: ${currentEmail.subject}\nDate: ${new Date(currentEmail.created_at).toLocaleString()}\n\n${currentEmail.body}`;
            
            const viewModal = bootstrap.Modal.getInstance(document.getElementById('emailViewModal'));
            viewModal.hide();
            
            const composeModal = new bootstrap.Modal(document.getElementById('composeModal'));
            composeModal.show();
        }
    }

    function forwardEmail() {
        if (currentEmail) {
            document.getElementById('emailSubject').value = 'Fwd: ' + currentEmail.subject;
            document.getElementById('emailBody').value = `\n\n--- Forwarded Message ---\nFrom: ${currentEmail.sender_email}\nTo: ${currentEmail.recipient_email}\nSubject: ${currentEmail.subject}\nDate: ${new Date(currentEmail.created_at).toLocaleString()}\n\n${currentEmail.body}`;
            
            const viewModal = bootstrap.Modal.getInstance(document.getElementById('emailViewModal'));
            viewModal.hide();
            
            const composeModal = new bootstrap.Modal(document.getElementById('composeModal'));
            composeModal.show();
        }
    }

    // Helper functions for notifications
    function showSuccess(message) {
        // You can replace this with your preferred notification system
        alert(message);
    }

    function showError(message) {
        // You can replace this with your preferred notification system
        alert(message);
    }
</script>