<div class="main-content">
    <div class="mt-5 container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="mb-0">
                <i class="bi bi-calendar-event text-primary me-3"></i>Calendar
            </h1>
            <div class="text-muted">
                <i class="bi bi-clock me-1"></i>
                <span id="currentTime"></span>
            </div>
        </div>
        
        <!-- Enhanced Calendar Navigation -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-gradient-primary text-white d-flex justify-content-between align-items-center py-3">
                        <h5 class="mb-0 d-flex align-items-center">
                            <i class="bi bi-calendar-month me-2"></i>
                            <span id="currentMonth">January 2025</span>
                        </h5>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-light btn-sm" id="prevMonth" title="Previous Month">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                            <button type="button" class="btn btn-light btn-sm text-primary fw-bold" id="todayBtn">Today</button>
                            <button type="button" class="btn btn-outline-light btn-sm" id="nextMonth" title="Next Month">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <!-- Enhanced Calendar Grid -->
                        <div class="table-responsive">
                            <table class="table mb-0" id="calendarTable">
                                <thead class="bg-light">
                                    <tr>
                                        <th class="text-center py-3 fw-bold text-muted border-0">SUN</th>
                                        <th class="text-center py-3 fw-bold text-muted border-0">MON</th>
                                        <th class="text-center py-3 fw-bold text-muted border-0">TUE</th>
                                        <th class="text-center py-3 fw-bold text-muted border-0">WED</th>
                                        <th class="text-center py-3 fw-bold text-muted border-0">THU</th>
                                        <th class="text-center py-3 fw-bold text-muted border-0">FRI</th>
                                        <th class="text-center py-3 fw-bold text-muted border-0">SAT</th>
                                    </tr>
                                </thead>
                                <tbody id="calendarBody">
                                    <!-- Calendar days will be generated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Quick Actions and Events Row -->
        <div class="row">
            <!-- Enhanced Quick Actions -->
            <div class="col-lg-4 mb-4">
                <div class="card shadow-sm border-0 h-100">
                    <div class="card-header bg-success text-white py-3">
                        <h6 class="mb-0 d-flex align-items-center">
                            <i class="bi bi-lightning-charge me-2"></i>Quick Actions
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-3">
                            <button class="btn btn-primary btn-lg d-flex align-items-center justify-content-center">
                                <i class="bi bi-calendar-plus me-2"></i>
                                <span>Add Event</span>
                            </button>
                            <button class="btn btn-outline-primary btn-lg d-flex align-items-center justify-content-center">
                                <i class="bi bi-people me-2"></i>
                                <span>Schedule Meeting</span>
                            </button>
                            <button class="btn btn-outline-info btn-lg d-flex align-items-center justify-content-center">
                                <i class="bi bi-arrow-clockwise me-2"></i>
                                <span>Sync Calendar</span>
                            </button>
                        </div>
                        
                        <!-- Mini Stats -->
                        <hr class="my-4">
                        <div class="row text-center">
                            <div class="col-6">
                                <div class="small text-muted">This Month</div>
                                <div class="h5 mb-0 text-primary">0</div>
                                <div class="small">Events</div>
                            </div>
                            <div class="col-6">
                                <div class="small text-muted">Today</div>
                                <div class="h5 mb-0 text-success">0</div>
                                <div class="small">Tasks</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Enhanced Upcoming Events -->
            <div class="col-lg-8 mb-4">
                <div class="card shadow-sm border-0 h-100">
                    <div class="card-header bg-info text-white py-3 d-flex justify-content-between align-items-center">
                        <h6 class="mb-0 d-flex align-items-center">
                            <i class="bi bi-calendar-check me-2"></i>Upcoming Events
                        </h6>
                        <span class="badge bg-light text-info">0 events</span>
                    </div>
                    <div class="card-body">
                        <div class="text-center py-5">
                            <div class="mb-4">
                                <i class="bi bi-calendar-x display-1 text-muted opacity-50"></i>
                            </div>
                            <h5 class="text-muted mb-2">No upcoming events</h5>
                            <p class="text-muted mb-4">Your scheduled events will appear here</p>
                            <button class="btn btn-outline-primary">
                                <i class="bi bi-plus-circle me-2"></i>Create your first event
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Calendar Integration -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-warning text-dark py-3">
                        <h6 class="mb-0 d-flex align-items-center">
                            <i class="bi bi-puzzle me-2"></i>Calendar Integration
                        </h6>
                    </div>
                    <div class="card-body text-center py-5">
                        <div class="mb-4">
                            <i class="bi bi-cloud-arrow-down display-4 text-muted"></i>
                        </div>
                        <h5 class="mb-3">Connect Your External Calendars</h5>
                        <p class="text-muted mb-4 col-md-8 mx-auto">
                            Sync your Google Calendar or Microsoft Outlook to automatically import and manage all your events in one place.
                        </p>
                        
                        <div class="row justify-content-center">
                            <div class="col-md-8">
                                <div class="d-flex flex-wrap justify-content-center gap-3">
                                    <button class="btn btn-outline-danger btn-lg" disabled>
                                        <i class="bi bi-google me-2"></i>
                                        <span>Google Calendar</span>
                                        <span class="badge bg-danger ms-2">Soon</span>
                                    </button>
                                    <button class="btn btn-outline-primary btn-lg" id="microsoftIntegrationBtn">
                                        <i class="bi bi-microsoft me-2"></i>
                                        <span id="microsoftBtnText">Microsoft Outlook</span>
                                        <span class="badge bg-primary ms-2" id="microsoftBtnBadge">Connect</span>
                                    </button>
                                    <button class="btn btn-outline-secondary btn-lg" disabled>
                                        <i class="bi bi-apple me-2"></i>
                                        <span>Apple Calendar</span>
                                        <span class="badge bg-secondary ms-2">Soon</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mt-4">
                            <small class="text-muted">
                                <i class="bi bi-shield-check me-1"></i>
                                All integrations are secure and encrypted
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const currentDate = new Date();
    let currentMonth = currentDate.getMonth();
    let currentYear = currentDate.getFullYear();

    const monthNames = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
    ];

    // Update current time
    function updateTime() {
        const now = new Date();
        const timeString = now.toLocaleTimeString('en-US', { 
            hour: '2-digit', 
            minute: '2-digit',
            hour12: true 
        });
        document.getElementById('currentTime').textContent = timeString;
    }

    // Update time immediately and then every minute
    updateTime();
    setInterval(updateTime, 60000);

    function generateCalendar(month, year) {
        const firstDay = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const today = new Date();
        
        document.getElementById('currentMonth').textContent = `${monthNames[month]} ${year}`;
        
        const calendarBody = document.getElementById('calendarBody');
        calendarBody.innerHTML = '';
        
        let date = 1;
        
        // Create calendar rows
        for (let i = 0; i < 6; i++) {
            const row = document.createElement('tr');
            
            for (let j = 0; j < 7; j++) {
                const cell = document.createElement('td');
                cell.className = 'text-center calendar-day position-relative';
                cell.style.height = '90px';
                cell.style.verticalAlign = 'top';
                cell.style.cursor = 'pointer';
                cell.style.padding = '8px';
                cell.style.border = '1px solid #e9ecef';
                
                if (i === 0 && j < firstDay) {
                    // Empty cells before month starts - lighter gray
                    cell.innerHTML = '';
                    cell.style.backgroundColor = '#e9ecef';
                    cell.style.cursor = 'default';
                    cell.classList.add('empty-cell');
                } else if (date > daysInMonth) {
                    // Empty cells after month ends - lighter gray
                    cell.innerHTML = '';
                    cell.style.backgroundColor = '#e9ecef';
                    cell.style.cursor = 'default';
                    cell.classList.add('empty-cell');
                } else {
                    // Days of the month
                    const dayElement = document.createElement('div');
                    dayElement.className = 'day-number fw-bold mb-1';
                    dayElement.textContent = date;
                    
                    // Highlight today
                    if (year === today.getFullYear() && 
                        month === today.getMonth() && 
                        date === today.getDate()) {
                        cell.classList.add('today-cell');
                        dayElement.classList.add('text-white');
                        cell.innerHTML = `
                            <div class="today-badge">
                                <div class="day-number fw-bold text-white">${date}</div>
                                <small class="text-white-50">Today</small>
                            </div>
                        `;
                    } else {
                        cell.appendChild(dayElement);
                        
                        // Weekend styling
                        if (j === 0 || j === 6) {
                            cell.classList.add('weekend-cell');
                            dayElement.classList.add('text-warning'); // Better color for weekend dates
                        }
                    }
                    
                    // Set initial background color based on cell type
                    if (!cell.classList.contains('today-cell')) {
                        let originalBgColor = '#6c757d'; // Dark gray for all active cells
                        cell.style.backgroundColor = originalBgColor;
                        cell.style.color = 'white';
                        
                        if (j === 0 || j === 6) {
                            cell.classList.add('weekend-cell');
                        }
                        
                        // Add hover effect only to non-today cells
                        cell.addEventListener('mouseenter', function() {
                            if (!this.classList.contains('today-cell') && !this.classList.contains('empty-cell')) {
                                this.dataset.originalBg = this.style.backgroundColor || originalBgColor;
                                this.style.backgroundColor = '#5a6268'; // Darker on hover
                                this.style.transform = 'scale(1.02)';
                                this.style.transition = 'all 0.2s ease';
                            }
                        });
                        
                        cell.addEventListener('mouseleave', function() {
                            if (!this.classList.contains('today-cell') && !this.classList.contains('empty-cell')) {
                                this.style.backgroundColor = this.dataset.originalBg || originalBgColor;
                                this.style.transform = '';
                            }
                        });
                    }
                    
                    // Click event for day selection
                    cell.addEventListener('click', function() {
                        // Remove previous selection
                        document.querySelectorAll('.selected-day').forEach(el => {
                            el.classList.remove('selected-day');
                        });
                        
                        if (!this.classList.contains('today-cell')) {
                            this.classList.add('selected-day');
                        }
                    });
                    
                    date++;
                }
                
                row.appendChild(cell);
            }
            
            calendarBody.appendChild(row);
            
            // Break if we've filled all days
            if (date > daysInMonth) {
                break;
            }
        }
    }

    // Event listeners for navigation with smooth transitions
    document.getElementById('prevMonth').addEventListener('click', function() {
        this.disabled = true;
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        
        setTimeout(() => {
            generateCalendar(currentMonth, currentYear);
            if (microsoftConnected) loadMicrosoftEvents();
            this.disabled = false;
        }, 150);
    });

    document.getElementById('nextMonth').addEventListener('click', function() {
        this.disabled = true;
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        
        setTimeout(() => {
            generateCalendar(currentMonth, currentYear);
            if (microsoftConnected) loadMicrosoftEvents();
            this.disabled = false;
        }, 150);
    });

    document.getElementById('todayBtn').addEventListener('click', function() {
        const today = new Date();
        currentMonth = today.getMonth();
        currentYear = today.getFullYear();
        generateCalendar(currentMonth, currentYear);
        if (microsoftConnected) loadMicrosoftEvents();
        
        // Add pulse effect to today button
        this.style.transform = 'scale(0.95)';
        setTimeout(() => {
            this.style.transform = '';
        }, 150);
    });

    // Generate initial calendar
    generateCalendar(currentMonth, currentYear);

    // Microsoft Integration functionality
    let microsoftConnected = false;
    let microsoftEvents = [];

    // Check Microsoft integration status on page load
    checkMicrosoftStatus();

    async function checkMicrosoftStatus() {
        try {
            const response = await fetch('/api/microsoft/status');
            const data = await response.json();
            
            if (!data.configured) {
                microsoftConnected = false;
                updateMicrosoftUI(false, 'not_configured');
                return;
            }
            
            if (data.connected) {
                microsoftConnected = true;
                updateMicrosoftUI(true);
                await loadMicrosoftEvents();
            } else {
                updateMicrosoftUI(false);
            }
        } catch (error) {
            console.error('Error checking Microsoft status:', error);
            updateMicrosoftUI(false);
        }
    }

    function updateMicrosoftUI(connected, state = null) {
        const btn = document.getElementById('microsoftIntegrationBtn');
        const btnText = document.getElementById('microsoftBtnText');
        const btnBadge = document.getElementById('microsoftBtnBadge');

        if (state === 'not_configured') {
            btn.classList.remove('btn-success', 'btn-outline-primary');
            btn.classList.add('btn-outline-warning');
            btn.disabled = true;
            btnText.textContent = 'Microsoft Outlook';
            btnBadge.textContent = 'Not Configured';
            btnBadge.classList.remove('bg-primary', 'bg-success');
            btnBadge.classList.add('bg-warning');
            
            btn.title = 'Microsoft integration not configured. Please check setup guide.';
            return;
        }

        if (connected) {
            btn.classList.remove('btn-outline-primary', 'btn-outline-warning');
            btn.classList.add('btn-success');
            btn.disabled = false;
            btnText.textContent = 'Microsoft Outlook';
            btnBadge.textContent = 'Connected';
            btnBadge.classList.remove('bg-primary', 'bg-warning');
            btnBadge.classList.add('bg-success');
            btn.title = 'Microsoft Outlook connected. Click to disconnect.';
            
            // Add disconnect functionality
            btn.onclick = function() {
                if (confirm('Are you sure you want to disconnect Microsoft Outlook?')) {
                    disconnectMicrosoft();
                }
            };
        } else {
            btn.classList.remove('btn-success', 'btn-outline-warning');
            btn.classList.add('btn-outline-primary');
            btn.disabled = false;
            btnText.textContent = 'Microsoft Outlook';
            btnBadge.textContent = 'Connect';
            btnBadge.classList.remove('bg-success', 'bg-warning');
            btnBadge.classList.add('bg-primary');
            btn.title = 'Connect to Microsoft Outlook';
            
            // Add connect functionality
            btn.onclick = function() {
                window.location.href = '/auth/microsoft';
            };
        }
    }

    async function disconnectMicrosoft() {
        try {
            const response = await fetch('/api/microsoft/disconnect', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const data = await response.json();
            if (data.success) {
                microsoftConnected = false;
                microsoftEvents = [];
                updateMicrosoftUI(false);
                updateCalendarWithEvents(); // Refresh calendar display
                showNotification('Microsoft Outlook disconnected successfully', 'success');
            } else {
                showNotification('Failed to disconnect Microsoft Outlook', 'error');
            }
        } catch (error) {
            console.error('Error disconnecting Microsoft:', error);
            showNotification('Error disconnecting Microsoft Outlook', 'error');
        }
    }

    async function loadMicrosoftEvents() {
        if (!microsoftConnected) return;

        try {
            const startDate = new Date(currentYear, currentMonth, 1).toISOString();
            const endDate = new Date(currentYear, currentMonth + 1, 0).toISOString();
            
            const response = await fetch(`/api/microsoft/events?start=${startDate}&end=${endDate}`);
            const data = await response.json();
            
            if (data.success) {
                microsoftEvents = data.events;
                updateCalendarWithEvents();
                updateEventCount();
            }
        } catch (error) {
            console.error('Error loading Microsoft events:', error);
            showNotification('Failed to load Microsoft events', 'error');
        }
    }

    function updateCalendarWithEvents() {
        // Clear existing event indicators
        document.querySelectorAll('.event-indicator').forEach(el => el.remove());
        
        microsoftEvents.forEach(event => {
            const eventDate = new Date(event.start);
            if (eventDate.getMonth() === currentMonth && eventDate.getFullYear() === currentYear) {
                const dayCell = findDayCell(eventDate.getDate());
                if (dayCell && !dayCell.classList.contains('empty-cell')) {
                    addEventIndicator(dayCell, event);
                }
            }
        });
    }

    function findDayCell(day) {
        const cells = document.querySelectorAll('.calendar-day');
        for (let cell of cells) {
            const dayElement = cell.querySelector('.day-number');
            if (dayElement && parseInt(dayElement.textContent) === day && !cell.classList.contains('empty-cell')) {
                return cell;
            }
        }
        return null;
    }

    function addEventIndicator(cell, event) {
        const indicator = document.createElement('div');
        indicator.className = 'event-indicator';
        indicator.style.cssText = `
            position: absolute;
            bottom: 4px;
            left: 4px;
            right: 4px;
            height: 4px;
            background-color: #0066cc;
            border-radius: 2px;
            font-size: 0.7rem;
            overflow: hidden;
        `;
        indicator.title = `${event.title} (${new Date(event.start).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})})`;
        cell.appendChild(indicator);
    }

    function updateEventCount() {
        const eventCountElement = document.querySelector('.col-6 .h5');
        if (eventCountElement) {
            const currentMonthEvents = microsoftEvents.filter(event => {
                const eventDate = new Date(event.start);
                return eventDate.getMonth() === currentMonth && eventDate.getFullYear() === currentYear;
            });
            eventCountElement.textContent = currentMonthEvents.length;
        }
    }

    function showNotification(message, type = 'info') {
        // Create notification element
        const notification = document.createElement('div');
        const alertType = type === 'error' ? 'danger' : type;
        notification.className = `alert alert-${alertType} alert-dismissible fade show position-fixed`;
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(notification);
        
        // Auto remove after 5 seconds
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }

    // Check for connection status in URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('connected') === 'microsoft') {
        showNotification('Microsoft Outlook connected successfully!', 'success');
        // Clean up URL
        window.history.replaceState({}, document.title, window.location.pathname);
    } else if (urlParams.get('error') === 'microsoft_auth_failed') {
        showNotification('Failed to connect Microsoft Outlook. Please try again.', 'error');
        // Clean up URL
        window.history.replaceState({}, document.title, window.location.pathname);
    } else if (urlParams.get('error') === 'microsoft_not_configured') {
        showNotification('Microsoft integration is not configured. Please check the setup guide.', 'warning');
        // Clean up URL
        window.history.replaceState({}, document.title, window.location.pathname);
    }
});
</script>